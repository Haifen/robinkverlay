From e57f4acff7a1a31d6dd98bbc00024304197a529c Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 17 Mar 2020 01:44:25 +0200
Subject: [PATCH 15/18] wip: compositor/native: Request variable refresh rate
 for compatible windows

https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1154
---
 src/compositor/meta-compositor-native.c | 93 +++++++++++++++++++++++++
 src/compositor/meta-compositor-native.h |  3 +
 src/compositor/meta-window-actor.c      | 52 ++++++++++++++
 3 files changed, 148 insertions(+)

diff --git a/src/compositor/meta-compositor-native.c b/src/compositor/meta-compositor-native.c
index 85929c035..8d627f8a4 100644
--- a/src/compositor/meta-compositor-native.c
+++ b/src/compositor/meta-compositor-native.c
@@ -23,11 +23,14 @@
 #include "compositor/meta-compositor-native.h"
 
 #include "backends/meta-logical-monitor.h"
+#include "backends/native/meta-renderer-native.h"
 #include "compositor/meta-surface-actor-wayland.h"
 
 struct _MetaCompositorNative
 {
   MetaCompositorServer parent;
+
+  GList *vrr_logical_monitors;
 };
 
 G_DEFINE_TYPE (MetaCompositorNative, meta_compositor_native,
@@ -115,15 +118,92 @@ maybe_assign_primary_plane (MetaCompositor *compositor)
   clutter_stage_view_assign_next_scanout (CLUTTER_STAGE_VIEW (view), scanout);
 }
 
+void
+meta_compositor_native_request_vrr_for_logical_monitor (MetaCompositorNative *compositor_native,
+                                                        MetaLogicalMonitor   *logical_monitor)
+{
+  compositor_native->vrr_logical_monitors =
+    g_list_append (compositor_native->vrr_logical_monitors, logical_monitor);
+}
+
+static void
+queue_mode_set_for_logical_monitor (MetaLogicalMonitor *logical_monitor)
+{
+  MetaBackend *backend = meta_get_backend ();
+  MetaRenderer *renderer = meta_backend_get_renderer (backend);
+  MetaRectangle logical_monitor_layout;
+  GList *l;
+
+  logical_monitor_layout = meta_logical_monitor_get_layout (logical_monitor);
+
+  for (l = meta_renderer_get_views (renderer); l; l = l->next)
+    {
+      MetaRendererView *view = l->data;
+      MetaRectangle view_layout;
+
+      clutter_stage_view_get_layout (CLUTTER_STAGE_VIEW (view), &view_layout);
+
+      if (meta_rectangle_overlap (&logical_monitor_layout, &view_layout))
+          meta_renderer_native_view_queue_mode_set (view);
+    }
+}
+
+static void
+request_vrr_mode_for_logical_monitor (MetaLogicalMonitor *logical_monitor,
+                                      gboolean            vrr_requested)
+{
+  GList *l;
+  gboolean vrr_mode_changed = FALSE;
+
+  for (l = meta_logical_monitor_get_monitors (logical_monitor); l; l = l->next)
+    {
+      MetaMonitor *monitor = l->data;
+
+      if (vrr_requested != meta_monitor_is_vrr_requested (monitor))
+        {
+          meta_monitor_set_vrr_requested (monitor, vrr_requested);
+          vrr_mode_changed = TRUE;
+        }
+    }
+
+  if (vrr_mode_changed)
+    queue_mode_set_for_logical_monitor (logical_monitor);
+}
+
+static void
+request_vrr_mode_for_logical_monitors (MetaCompositorNative *compositor_native)
+{
+  MetaBackend *backend = meta_get_backend ();
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (backend);;
+  GList *l;
+
+  for (l = meta_monitor_manager_get_logical_monitors (monitor_manager); l; l = l->next)
+    {
+      MetaLogicalMonitor *logical_monitor = l->data;
+
+      if (g_list_find (compositor_native->vrr_logical_monitors,
+                       logical_monitor))
+        request_vrr_mode_for_logical_monitor (logical_monitor, TRUE);
+      else
+        request_vrr_mode_for_logical_monitor (logical_monitor, FALSE);
+    }
+
+  g_clear_pointer (&compositor_native->vrr_logical_monitors, g_list_free);
+}
+
 static void
 meta_compositor_native_pre_paint (MetaCompositor *compositor)
 {
+  MetaCompositorNative *compositor_native = META_COMPOSITOR_NATIVE (compositor);
   MetaCompositorClass *parent_class;
 
   maybe_assign_primary_plane (compositor);
 
   parent_class = META_COMPOSITOR_CLASS (meta_compositor_native_parent_class);
   parent_class->pre_paint (compositor);
+
+  request_vrr_mode_for_logical_monitors (compositor_native);
 }
 
 MetaCompositorNative *
@@ -139,10 +219,23 @@ meta_compositor_native_init (MetaCompositorNative *compositor_native)
 {
 }
 
+static void
+meta_compositor_native_dispose (GObject *object)
+{
+  MetaCompositorNative *compositor_native = META_COMPOSITOR_NATIVE (object);
+
+  g_clear_pointer (&compositor_native->vrr_logical_monitors, g_list_free);
+
+  G_OBJECT_CLASS (meta_compositor_native_parent_class)->dispose (object);
+}
+
 static void
 meta_compositor_native_class_init (MetaCompositorNativeClass *klass)
 {
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
   MetaCompositorClass *compositor_class = META_COMPOSITOR_CLASS (klass);
 
+  object_class->dispose = meta_compositor_native_dispose;
+
   compositor_class->pre_paint = meta_compositor_native_pre_paint;
 }
diff --git a/src/compositor/meta-compositor-native.h b/src/compositor/meta-compositor-native.h
index d276a5905..c5c90c42e 100644
--- a/src/compositor/meta-compositor-native.h
+++ b/src/compositor/meta-compositor-native.h
@@ -27,6 +27,9 @@
 G_DECLARE_FINAL_TYPE (MetaCompositorNative, meta_compositor_native,
                       META, COMPOSITOR_NATIVE, MetaCompositor)
 
+void meta_compositor_native_request_vrr_for_logical_monitor (MetaCompositorNative *compositor_native,
+                                                             MetaLogicalMonitor   *logical_monitor);
+
 MetaCompositorNative * meta_compositor_native_new (MetaDisplay *display);
 
 #endif /* META_COMPOSITOR_NATIVE_H */
diff --git a/src/compositor/meta-window-actor.c b/src/compositor/meta-window-actor.c
index 79f4ce6a6..f23451e17 100644
--- a/src/compositor/meta-window-actor.c
+++ b/src/compositor/meta-window-actor.c
@@ -41,6 +41,11 @@
 #include "wayland/meta-wayland-surface.h"
 #endif
 
+#ifdef HAVE_NATIVE_BACKEND
+#include "backends/native/meta-backend-native.h"
+#include "compositor/meta-compositor-native.h"
+#endif
+
 typedef enum
 {
   INITIALLY_FROZEN,
@@ -1006,6 +1011,48 @@ meta_window_actor_sync_visibility (MetaWindowActor *self)
     }
 }
 
+#ifdef HAVE_NATIVE_BACKEND
+static void
+meta_window_actor_maybe_request_vrr (MetaWindowActor *window_actor)
+{
+  MetaWindowActorPrivate *priv =
+    meta_window_actor_get_instance_private (window_actor);
+  MetaCompositor *compositor = priv->compositor;
+  MetaCompositorNative *compositor_native = META_COMPOSITOR_NATIVE (compositor);
+  MetaWindow *window;
+  MetaLogicalMonitor *logical_monitor;
+
+  if (meta_compositor_is_unredirect_inhibited (compositor))
+    return;
+
+  if (meta_window_actor_effect_in_progress (window_actor))
+    return;
+
+  if (clutter_actor_has_transitions (CLUTTER_ACTOR (window_actor)))
+    return;
+
+  window = meta_window_actor_get_meta_window (window_actor);
+  if (!window)
+    return;
+
+  if (!meta_window_vrr_requested (window))
+    return;
+
+  if (!meta_window_should_be_showing (window))
+    return;
+
+  if (!meta_window_is_logical_monitor_sized (window))
+    return;
+
+  logical_monitor = meta_window_get_main_logical_monitor (window);
+  if (!logical_monitor)
+    return;
+
+  meta_compositor_native_request_vrr_for_logical_monitor (compositor_native,
+                                                          logical_monitor);
+}
+#endif /* HAVE_NATIVE_BACKEND */
+
 void
 meta_window_actor_pre_paint (MetaWindowActor *self)
 {
@@ -1013,6 +1060,11 @@ meta_window_actor_pre_paint (MetaWindowActor *self)
     return;
 
   META_WINDOW_ACTOR_GET_CLASS (self)->pre_paint (self);
+
+#ifdef HAVE_NATIVE_BACKEND
+  if (META_IS_BACKEND_NATIVE (meta_get_backend ()))
+    meta_window_actor_maybe_request_vrr (self);
+#endif
 }
 
 void
-- 
2.26.2

