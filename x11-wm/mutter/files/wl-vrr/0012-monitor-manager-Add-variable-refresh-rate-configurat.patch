From 03c532ab79d4da28b3a9c8caec90466efa483820 Mon Sep 17 00:00:00 2001
From: Dor Askayo <dor.askayo@gmail.com>
Date: Tue, 17 Mar 2020 20:52:16 +0200
Subject: [PATCH 12/18] monitor-manager: Add variable refresh rate
 configuration

This allows enabling variable refresh rates for monitors that support
it.

The configuration is persistent via monitors.xml and exposed in
DisplayConfig to be managed through DBus.

https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/1154
---
 src/backends/meta-monitor-config-manager.c    |  9 ++++--
 src/backends/meta-monitor-config-manager.h    |  1 +
 src/backends/meta-monitor-config-migration.c  |  6 +++-
 src/backends/meta-monitor-config-store.c      | 30 +++++++++++++++++++
 src/backends/meta-monitor-manager-private.h   |  1 +
 src/backends/meta-monitor-manager.c           | 27 ++++++++++++++++-
 .../native/meta-monitor-manager-kms.c         |  1 +
 src/org.gnome.Mutter.DisplayConfig.xml        |  7 +++++
 8 files changed, 77 insertions(+), 5 deletions(-)

diff --git a/src/backends/meta-monitor-config-manager.c b/src/backends/meta-monitor-config-manager.c
index 6a7c807bf..d35f14e82 100644
--- a/src/backends/meta-monitor-config-manager.c
+++ b/src/backends/meta-monitor-config-manager.c
@@ -275,7 +275,8 @@ assign_monitor_crtc (MetaMonitor         *monitor,
     .output = output,
     .is_primary = assign_output_as_primary,
     .is_presentation = assign_output_as_presentation,
-    .is_underscanning = data->monitor_config->enable_underscanning
+    .is_underscanning = data->monitor_config->enable_underscanning,
+    .vrr_enabled = data->monitor_config->enable_vrr
   };
 
   g_ptr_array_add (data->crtc_infos, crtc_info);
@@ -628,7 +629,8 @@ create_monitor_config (MetaMonitor     *monitor,
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = meta_monitor_spec_clone (monitor_spec),
     .mode_spec = g_memdup (mode_spec, sizeof (MetaMonitorModeSpec)),
-    .enable_underscanning = meta_monitor_is_underscanning (monitor)
+    .enable_underscanning = meta_monitor_is_underscanning (monitor),
+    .enable_vrr = meta_monitor_is_vrr_enabled (monitor)
   };
 
   return monitor_config;
@@ -910,7 +912,8 @@ clone_monitor_config_list (GList *monitor_configs_in)
         .monitor_spec = meta_monitor_spec_clone (monitor_config_in->monitor_spec),
         .mode_spec = g_memdup (monitor_config_in->mode_spec,
                                sizeof (MetaMonitorModeSpec)),
-        .enable_underscanning = monitor_config_in->enable_underscanning
+        .enable_underscanning = monitor_config_in->enable_underscanning,
+        .enable_vrr = monitor_config_in->enable_vrr
       };
       monitor_configs_out =
         g_list_append (monitor_configs_out, monitor_config_out);
diff --git a/src/backends/meta-monitor-config-manager.h b/src/backends/meta-monitor-config-manager.h
index 3875e04e9..d672edb8a 100644
--- a/src/backends/meta-monitor-config-manager.h
+++ b/src/backends/meta-monitor-config-manager.h
@@ -34,6 +34,7 @@ typedef struct _MetaMonitorConfig
   MetaMonitorSpec *monitor_spec;
   MetaMonitorModeSpec *mode_spec;
   gboolean enable_underscanning;
+  gboolean enable_vrr;
 } MetaMonitorConfig;
 
 typedef struct _MetaLogicalMonitorConfig
diff --git a/src/backends/meta-monitor-config-migration.c b/src/backends/meta-monitor-config-migration.c
index d619dc433..d9f6a9001 100644
--- a/src/backends/meta-monitor-config-migration.c
+++ b/src/backends/meta-monitor-config-migration.c
@@ -74,6 +74,7 @@ typedef struct
   gboolean is_primary;
   gboolean is_presentation;
   gboolean is_underscanning;
+  gboolean vrr_enabled;
 } MetaOutputConfig;
 
 typedef struct _MetaLegacyMonitorsConfig
@@ -605,6 +606,8 @@ handle_text (GMarkupParseContext *context,
           parser->output.is_presentation = read_bool (text, text_len, error);
         else if (strcmp (parser->output_field, "underscanning") == 0)
           parser->output.is_underscanning = read_bool (text, text_len, error);
+        else if (strcmp (parser->output_field, "enable_vrr") == 0)
+          parser->output.vrr_enabled = read_bool (text, text_len, error);
         else
           g_assert_not_reached ();
         return;
@@ -697,7 +700,8 @@ create_monitor_config (MetaOutputKey    *output_key,
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = monitor_spec,
     .mode_spec = mode_spec,
-    .enable_underscanning = output_config->is_underscanning
+    .enable_underscanning = output_config->is_underscanning,
+    .enable_vrr = output_config->vrr_enabled
   };
 
   if (!meta_verify_monitor_config (monitor_config, error))
diff --git a/src/backends/meta-monitor-config-store.c b/src/backends/meta-monitor-config-store.c
index 770bef734..e2c3b3594 100644
--- a/src/backends/meta-monitor-config-store.c
+++ b/src/backends/meta-monitor-config-store.c
@@ -160,6 +160,7 @@ typedef enum
   STATE_MONITOR_MODE_RATE,
   STATE_MONITOR_MODE_FLAG,
   STATE_MONITOR_UNDERSCANNING,
+  STATE_MONITOR_ENABLE_VRR,
   STATE_DISABLED,
 } ParserState;
 
@@ -382,6 +383,10 @@ handle_start_element (GMarkupParseContext  *context,
           {
             parser->state = STATE_MONITOR_UNDERSCANNING;
           }
+	else if (g_str_equal (element_name, "enable-vrr"))
+          {
+            parser->state = STATE_MONITOR_ENABLE_VRR;
+          }
         else
           {
             g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
@@ -475,6 +480,13 @@ handle_start_element (GMarkupParseContext  *context,
         return;
       }
 
+    case STATE_MONITOR_ENABLE_VRR:
+      {
+        g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
+                     "Invalid element '%s' under enable-vrr", element_name);
+        return;
+      }
+
     case STATE_DISABLED:
       {
         if (!g_str_equal (element_name, "monitorspec"))
@@ -676,6 +688,14 @@ handle_end_element (GMarkupParseContext  *context,
         return;
       }
 
+    case STATE_MONITOR_ENABLE_VRR:
+      {
+        g_assert (g_str_equal (element_name, "enable-vrr"));
+
+        parser->state = STATE_MONITOR;
+        return;
+      }
+
     case STATE_MONITOR:
       {
         MetaLogicalMonitorConfig *logical_monitor_config;
@@ -1072,6 +1092,14 @@ handle_text (GMarkupParseContext *context,
                    error);
         return;
       }
+
+    case STATE_MONITOR_ENABLE_VRR:
+      {
+        read_bool (text, text_len,
+                   &parser->current_monitor_config->enable_vrr,
+                   error);
+        return;
+      }
     }
 }
 
@@ -1182,6 +1210,8 @@ append_monitors (GString *buffer,
       g_string_append (buffer, "        </mode>\n");
       if (monitor_config->enable_underscanning)
         g_string_append (buffer, "        <underscanning>yes</underscanning>\n");
+      if (monitor_config->enable_vrr)
+        g_string_append (buffer, "        <enable-vrr>yes</enable-vrr>\n");
       g_string_append (buffer, "      </monitor>\n");
     }
 }
diff --git a/src/backends/meta-monitor-manager-private.h b/src/backends/meta-monitor-manager-private.h
index a0a28b6c2..8dde569ed 100644
--- a/src/backends/meta-monitor-manager-private.h
+++ b/src/backends/meta-monitor-manager-private.h
@@ -89,6 +89,7 @@ struct _MetaOutputInfo
   gboolean     is_primary;
   gboolean     is_presentation;
   gboolean     is_underscanning;
+  gboolean     vrr_enabled;
 };
 
 #define META_TYPE_MONITOR_MANAGER            (meta_monitor_manager_get_type ())
diff --git a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
index 3505573b8..4c4016c5f 100644
--- a/src/backends/meta-monitor-manager.c
+++ b/src/backends/meta-monitor-manager.c
@@ -1392,6 +1392,15 @@ meta_monitor_manager_handle_get_current_state (MetaDBusDisplayConfig *skeleton,
                                  g_variant_new_boolean (is_underscanning));
         }
 
+      if (meta_monitor_is_vrr_capable (monitor))
+        {
+          gboolean vrr_enabled = meta_monitor_is_vrr_enabled (monitor);
+
+          g_variant_builder_add (&monitor_properties_builder, "{sv}",
+                                 "vrr-enabled",
+                                 g_variant_new_boolean (vrr_enabled));
+        }
+
       is_builtin = meta_monitor_is_laptop_panel (monitor);
       g_variant_builder_add (&monitor_properties_builder, "{sv}",
                              "is-builtin",
@@ -1661,6 +1670,8 @@ create_monitor_config_from_variant (MetaMonitorManager *manager,
   g_autoptr (GVariant) properties_variant = NULL;
   gboolean enable_underscanning = FALSE;
   gboolean set_underscanning = FALSE;
+  gboolean enable_vrr = FALSE;
+  gboolean set_enable_vrr = FALSE;
 
   g_variant_get (monitor_config_variant, "(ss@a{sv})",
                  &connector,
@@ -1696,6 +1707,19 @@ create_monitor_config_from_variant (MetaMonitorManager *manager,
         }
     }
 
+  set_enable_vrr =
+    g_variant_lookup (properties_variant, "enable_vrr", "b",
+                      &enable_vrr);
+  if (set_enable_vrr)
+    {
+      if (enable_vrr && !meta_monitor_is_vrr_capable (monitor))
+        {
+          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                       "Variable refresh rate requested but unsupported");
+	  return NULL;
+        }
+    }
+
   monitor_spec = meta_monitor_spec_clone (meta_monitor_get_spec (monitor));
 
   monitor_mode_spec = g_new0 (MetaMonitorModeSpec, 1);
@@ -1705,7 +1729,8 @@ create_monitor_config_from_variant (MetaMonitorManager *manager,
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = monitor_spec,
     .mode_spec = monitor_mode_spec,
-    .enable_underscanning = enable_underscanning
+    .enable_underscanning = enable_underscanning,
+    .enable_vrr = enable_vrr
   };
 
   return monitor_config;
diff --git a/src/backends/native/meta-monitor-manager-kms.c b/src/backends/native/meta-monitor-manager-kms.c
index 6dcba6442..b1d900559 100644
--- a/src/backends/native/meta-monitor-manager-kms.c
+++ b/src/backends/native/meta-monitor-manager-kms.c
@@ -239,6 +239,7 @@ apply_crtc_assignments (MetaMonitorManager *manager,
       output->is_primary = output_info->is_primary;
       output->is_presentation = output_info->is_presentation;
       output->is_underscanning = output_info->is_underscanning;
+      output->vrr_enabled = output_info->vrr_enabled;
     }
 
   /* Disable outputs not mentioned in the list */
diff --git a/src/org.gnome.Mutter.DisplayConfig.xml b/src/org.gnome.Mutter.DisplayConfig.xml
index ec04649fa..d56adec29 100644
--- a/src/org.gnome.Mutter.DisplayConfig.xml
+++ b/src/org.gnome.Mutter.DisplayConfig.xml
@@ -321,6 +321,10 @@
 	    - "is-underscanning" (b): whether underscanning is enabled
 				      (absence of this means underscanning
 				      not being supported)
+	    - "vrr-enabled" (b): whether variable refresh rate is enabled
+	                         (absence of this means variable refresh
+	                         rate not being supported)
+
 	    - "max-screen-size" (ii): the maximum size a screen may have
 				      (absence of this means unlimited screen
 				      size)
@@ -433,6 +437,9 @@
 	        - "enable_underscanning" (b): enable monitor underscanning;
 					      may only be set when underscanning
 					      is supported (see GetCurrentState).
+	        - "enable_vrr" (b): enable variable refresh rate; may only be set
+	                            when variable refresh rate is supported (see
+	                            GetCurrentState).
 
 	@properties may effect the global monitor configuration state. Possible
 	properties are:
-- 
2.26.2

